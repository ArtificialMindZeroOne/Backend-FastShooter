// rooms/roomManager.js
import {generateId} from '../utils/idGenerator.js';

const rooms = new Map();

// –°—Ç–∞—Ç—É—Å—ã –∫–æ–º–Ω–∞—Ç
const ROOM_STATUS = {
    PENDING: 'pending',   // –û–∂–∏–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    ACTIVE: 'active',     // –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    OVER: 'over'          // –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è
};

export function createRoom() {
    const roomId = generateId('room');
    rooms.set(roomId, {
        players: new Map(),
        connections: new Map(),
        bullets: [],
        status: ROOM_STATUS.PENDING
    });
    console.log(`üÜï –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —Å–æ–∑–¥–∞–Ω–∞ (${ROOM_STATUS.PENDING})`);
    return roomId;
}


////// 1) JOIN
export function joinRoom({playerData, server, playerIPAndPortInfo}) {
    let targetRoomId = null;

    // –ï—Å–ª–∏ roomId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—â–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
    for (const [id, room] of rooms.entries()) {
        if (room?.status === ROOM_STATUS.PENDING && room.players.size < 2) {
            targetRoomId = id;
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ ${id} –≤ —Å—Ç–∞—Ç—É—Å–µ ${ROOM_STATUS.PENDING} —Å 1 –∏–≥—Ä–æ–∫–æ–º!`);
            break;
        }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–º–Ω–∞—Ç—É –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if (!targetRoomId) {
        targetRoomId = createRoom();
        console.log(`üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ ${targetRoomId}!`);
    }

    const room = rooms.get(targetRoomId);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏ —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç
    const playerID = generateId('player');
    console.log(`–ù–û–í–´–ô –ò–ì–†–û–ö –°–û–ó–î–ê–ù –° ID: ${playerID}!!!!!`)
    const player = {
        id: playerID,
        x: playerData?.x ?? 0,
        y: playerData?.y ?? 0,
        direction: playerData?.direction ?? 1,
        nickname: playerData?.nickname ?? `–ò–≥—Ä–æ–∫-${Math.floor(Math.random())}`,
        skin1: playerData?.skin1 ?? 1,
        skin2: playerData?.skin2 ?? 1,
        skin3: playerData?.skin3 ?? 1,
        skin4: playerData?.skin4 ?? 1,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    room.players.set(playerID, player);

    // for (let [_, value] of rooms.entries()) {
    //     for (let [playerID, ipPort] of value.connections.entries()) {
    //         if (ipPort === playerIPAndPortInfo) {
    //             value.connections.delete(playerID);
    //         }
    //     }
    // }

    room.connections.set(playerID, playerIPAndPortInfo);

    console.log(`üë• –ò–≥—Ä–æ–∫ ${player.nickname} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${targetRoomId}`);
    console.log(`üìä –í –∫–æ–º–Ω–∞—Ç–µ ${targetRoomId} —Ç–µ–ø–µ—Ä—å ${room.players.size}/2 –∏–≥—Ä–æ–∫–æ–≤`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
    if (room.players.size === 2) {
        room.status = ROOM_STATUS.ACTIVE;
        console.log(`üéÆ –ö–æ–º–Ω–∞—Ç–∞ ${targetRoomId} –ø–µ—Ä–µ—à–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å ${ROOM_STATUS.ACTIVE}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const [ip, port] = playerIPAndPortInfo.split(':');
    const response = {
        type: 'join',
        roomId: targetRoomId,
        player: player,
        roomStatus: room.status
    };
    server.send(JSON.stringify(response), parseInt(port), ip);
}


////// 2) UPDATE
export function updatePlayer(playerIPAndPortInfo, playerData, packNumber, server, playerOldID) {
    console.log('rooms', rooms)
    console.log('–ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å—é–¥–∞', playerIPAndPortInfo)

    if (!playerIPAndPortInfo) return;

    for (const [roomId, room] of rooms.entries()) {
        const playerId = playerData?.id;
        if (!playerId || !room.players.has(playerId)) continue;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
        if (room.status !== ROOM_STATUS.ACTIVE) {
            break;
        }

        const player = room.players.get(playerId);

        const updated = {
            ...player,
            x: playerData?.x ?? player.x,
            y: playerData?.y ?? player.y,
            direction: playerData?.direction ?? player.direction,
            nickname: playerData?.nickname ?? player.nickname,
            packNumber: packNumber ?? packNumber,
            skin1: playerData?.skin1 ?? 1,
            skin2: playerData?.skin2 ?? 1,
            skin3: playerData?.skin3 ?? 1,
            skin4: playerData?.skin4 ?? 1,
        };

        room.players.set(playerId, updated);

        // –û–±–Ω–æ–≤–ª—è–µ–º IP:–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
        room.connections.set(playerId, playerIPAndPortInfo);

        const playersInRoom = Array.from(room.players.entries());

        // –†–∞—Å—Å—ã–ª–∞–µ–º –∫–∞–∂–¥–æ–º—É –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ 2 –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å ACTIVE)
        if (playersInRoom.length === 2 && room.status === ROOM_STATUS.ACTIVE) {
            for (const [clientId] of playersInRoom) {
                const clientIPPort = room.connections.get(clientId);
                if (!clientIPPort) continue;
                const [ip, port] = clientIPPort.split(':');

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                const otherPlayers = playersInRoom.filter(([id]) => id !== clientId);
                for (const [, other] of otherPlayers) {
                    const res = {
                        type: 'update',
                        roomId,
                        player: other,
                        roomStatus: room.status,
                        data1: playerData?.data1 ?? 0,
                        data2: playerData?.data2 ?? 0,
                        data3: playerData?.data3 ?? 0,
                        data4: playerData?.data4 ?? 0,
                        data5: playerData?.data5 ?? 0,
                        data6: playerData?.data6 ?? 0,
                        data7: playerData?.data7 ?? 0,
                        data8: playerData?.data8 ?? 0,
                        data9: playerData?.data9 ?? 0,
                        data10: playerData?.data10 ?? 0,
                    }

                    if (other.id !== playerOldID) {
                        server.send(JSON.stringify(res), parseInt(port), ip);
                    }

                    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—é–¥–∞: ', `${ip + parseInt(port)}`)
                    console.log('-------------')
                }
            }
        }
        break;
    }
}

////// 3) SHOOTUPDATE
export function updateShootData(playerIPAndPortInfo, bulletData, server) {
    console.log(`üî´ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∞ –æ—Ç ${playerIPAndPortInfo}:`);

    for (const [roomId, room] of rooms.entries()) {
        let shooterId = null;

        if (bulletData?.playerId && room.players.has(bulletData.playerId)) {
            shooterId = bulletData.playerId;
        }

        if (!shooterId) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (room.status !== ROOM_STATUS.ACTIVE) {
            console.log(`‚è∏Ô∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (${room.status}), –≤—ã—Å—Ç—Ä–µ–ª –ø—Ä–æ–ø—É—â–µ–Ω`);
            continue;
        }

        const shooter = room.players.get(shooterId);
        if (!shooter) continue;

        const bullet = {
            id: generateId('bullet'),
            playerId: shooterId,
            x: bulletData?.x ?? shooter.x,
            y: bulletData?.y ?? shooter.y,
            direction: bulletData?.direction ?? shooter.direction,
            damage: bulletData?.damage ?? 10,
            speed: bulletData?.speed ?? 25,
            hideTime: bulletData?.hideTime ?? 200,
            angle: bulletData?.angle ?? 0,
        };

        room.bullets.push(bullet);

        console.log(`üí• –ò–≥—Ä–æ–∫ ${shooter.nickname} –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –ø—É–ª—é ${bullet.id}`);

        broadcastBulletToRoom(roomId, bullet, server);
        break;
    }
}

function broadcastBulletToRoom(roomId, bullet, server) {
    const room = rooms.get(roomId);
    if (!room || room.status !== ROOM_STATUS.ACTIVE) return;

    const playersInRoom = Array.from(room.players.entries());

    for (const [clientId] of playersInRoom) {
        if (clientId === bullet.playerId) continue;

        const clientIPPort = room.connections.get(clientId);
        if (!clientIPPort) continue;

        const [ip, port] = clientIPPort.split(':');

        const bulletInfo = {
            type: 'shootData',
            bulletData: {
                playerId: bullet.playerId,
                x: bullet.x,
                y: bullet.y,
                direction: bullet.direction,
                damage: bullet.damage,
                speed: bullet.speed,
                hideTime: bullet.hideTime,
                angle: bullet.angle,
            }
        };

        server.send(JSON.stringify(bulletInfo), parseInt(port), ip);
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—É–ª—è –æ—Ç ${room.players.get(bullet.playerId)?.nickname} –∏–≥—Ä–æ–∫—É`);
    }
}

//// 4) REMOVEPLAYER
export function removePlayer(playerIPAndPortInfo, server, playerID) {
    console.log(`üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ${playerIPAndPortInfo}...`);

    for (const [roomId, room] of rooms.entries()) {
        for (const [playerId, connection] of room.connections.entries()) {
            if (connection === playerIPAndPortInfo) {
                const player = room.players.get(playerId);
                console.log(`üëã –ò–≥—Ä–æ–∫ ${player?.nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);

                room.players.delete(playerId);
                room.connections.delete(playerId);

                console.log(`üìä –í –∫–æ–º–Ω–∞—Ç–µ ${roomId} –æ—Å—Ç–∞–ª–æ—Å—å ${room.players.size}/2 –∏–≥—Ä–æ–∫–æ–≤.`);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
                if (room.players.size === 1) {
                    room.status = ROOM_STATUS.OVER;
                    console.log(`üíÄ –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –ø–µ—Ä–µ—à–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å ${ROOM_STATUS.OVER}!`);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                    notifyPlayerDisconnected(roomId, server);
                }
                // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è - —É–¥–∞–ª—è–µ–º
                else if (room.players.size === 0) {
                    rooms.delete(roomId);
                    console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)!`);
                }

                return {roomId, playerId};
            }
        }
    }
    console.log(`‚ùå –ò–≥—Ä–æ–∫ —Å connection ${playerIPAndPortInfo} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
}

//
// // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
//
// // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è
function notifyPlayerDisconnected(roomId, server) {
    const room = rooms.get(roomId);
    if (!room || room.players.size !== 1 || room.status !== ROOM_STATUS.OVER) return;

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    const [remainingPlayerId, remainingPlayer] = Array.from(room.players.entries())[0];
    const remainingConnection = room.connections.get(remainingPlayerId);

    if (remainingConnection) {
        const [ip, port] = remainingConnection.split(':');
        const disconnectMessage = {
            type: 'playerDisconnected',
            message: '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è',
            roomStatus: ROOM_STATUS.OVER
        };
        server.send(JSON.stringify(disconnectMessage), parseInt(port), ip);
        console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É ${remainingPlayer.nickname}`);
    }
}
