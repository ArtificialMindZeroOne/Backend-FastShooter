// rooms/roomManager.js
import { generateId } from '../utils/idGenerator.js';

const rooms = new Map(); // roomId -> { players: Map<playerId, playerData>, connections: Map<playerId, ipPort> }

export function createRoom() {
    const roomId = generateId('room');
    rooms.set(roomId, { players: new Map(), connections: new Map() });
    console.log(`üÜï –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —Å–æ–∑–¥–∞–Ω–∞`);
    return roomId;
}

export function joinRoom({ roomId, playerData, server, playerIPAndPortInfo }) {
    let targetRoomId = null;

    // –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É, –≥–¥–µ –º–µ–Ω—å—à–µ 2 –∏–≥—Ä–æ–∫–æ–≤
    for (const [id, room] of rooms.entries()) {
        if (room?.players.size < 2) {
            targetRoomId = id;
            break;
        }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    if (!targetRoomId) targetRoomId = createRoom();
    const room = rooms.get(targetRoomId);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏ —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç
    const playerID = generateId('player');
    const player = {
        id: playerID,
        x: playerData?.x ?? 0,
        y: playerData?.y ?? 0,
        direction: playerData?.direction ?? '1',
        nickname: playerData?.nickname ?? 'Unknown',
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    room.players.set(playerID, player);
    room.connections.set(playerID, playerIPAndPortInfo);

    console.log(`üë• –ò–≥—Ä–æ–∫ ${player.nickname} (${playerIPAndPortInfo}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${targetRoomId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    const [ip, port] = playerIPAndPortInfo.split(':');
    const response = {
        type: 'join',
        roomId: targetRoomId,
        player: player
    };

    server.send(JSON.stringify(response), parseInt(port), ip);
}

export function updatePlayer(playerIPAndPortInfo, playerData, server) {
    for (const [roomId, room] of rooms.entries()) {
        const playerId = playerData?.id;
        if (!playerId || !room.players.has(playerId)) continue;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const player = room.players.get(playerId);
        const updated = {
            ...player,
            x: playerData?.x ?? player.x,
            y: playerData?.y ?? player.y,
            direction: playerData?.direction ?? player.direction,
            nickname: playerData?.nickname ?? player.nickname,
        };
        room.players.set(playerId, updated);

        // –û–±–Ω–æ–≤–ª—è–µ–º IP:–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
        room.connections.set(playerId, playerIPAndPortInfo);

        const playersInRoom = Array.from(room.players.entries());

        if (playersInRoom.length < 2) {
            console.log(`‚ö†Ô∏è –í –∫–æ–º–Ω–∞—Ç–µ ${roomId} –º–µ–Ω—å—à–µ 2 –∏–≥—Ä–æ–∫–æ–≤ ‚Äî update –Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è`);
            break;
        }

        // –†–∞—Å—Å—ã–ª–∞–µ–º –∫–∞–∂–¥–æ–º—É –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        for (const [clientId, clientPlayer] of playersInRoom) {
            const clientIPPort = room.connections.get(clientId);
            if (!clientIPPort) continue;
            const [ip, port] = clientIPPort.split(':');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            const otherPlayers = playersInRoom.filter(([id]) => id !== clientId);
            for (const [, other] of otherPlayers) {

                const res = {
                    type: 'update',
                    roomId,
                    player: other
                }

                server.send(JSON.stringify(res), parseInt(port), ip);
            }
        }


        break;
    }
}
