import dgram from 'dgram';
import {joinRoom, updatePlayer, updateShootData, removePlayer} from './rooms/roomManager.js';

const PORT = 41234;
const server = dgram.createSocket('udp4');

// –•—Ä–∞–Ω–∏–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
const playerTimeouts = new Map();

function updatePlayerActivity(playerIPAndPortInfo, playerID) {

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
    if (playerTimeouts.has(playerIPAndPortInfo)) {
        clearTimeout(playerTimeouts.get(playerIPAndPortInfo).timeout);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä (30 —Å–µ–∫—É–Ω–¥)
    const timeout = setTimeout(() => {
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerIPAndPortInfo}`);
        removePlayer(playerIPAndPortInfo, server, playerID);
        playerTimeouts.delete(playerIPAndPortInfo);
    }, 5000);

    playerTimeouts.set(playerIPAndPortInfo, {timeout, playerID});
}

server.on('listening', () => {
    const address = server.address();
    console.log(`üöÄ UDP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç ${address.address}:${address.port}`);
});

server.on('message', (msg, rinfo) => {
    try {
        const str = msg.toString('utf8');
        const data = JSON.parse(str);
        const playerIPAndPortInfo = `${rinfo.address}:${rinfo.port}`;
        const playerID = JSON.parse(msg?.toString('utf8'))?.playerData?.id;


        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –õ–Æ–ë–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏
        updatePlayerActivity(playerIPAndPortInfo, playerID);

        switch (data.type) {
            case 'join':
                joinRoom({
                    playerData: data?.playerData,
                    server,
                    playerIPAndPortInfo,
                });
                break;
            case 'update':
                updatePlayer(playerIPAndPortInfo, data?.playerData, data?.packNumber, server, data);
                break;
            case 'shootData':
                updateShootData(playerIPAndPortInfo, data?.bulletData, server);
                break;
            // case 'disconnect': // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —è–≤–Ω–æ–≥–æ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞
            //     console.log(`üì§ –ò–≥—Ä–æ–∫ ${playerIPAndPortInfo} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
            //     removePlayer(playerIPAndPortInfo, server);
            //     playerTimeouts.delete(playerIPAndPortInfo);
            //     break;
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
        console.error('üì¶ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', msg.toString('utf8'));
    }
});

server.bind(PORT);